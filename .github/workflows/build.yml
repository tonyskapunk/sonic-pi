name: Build

on:
  # Do it on every push or PR on these branches
  push:
    branches: [dev, stable]
  pull_request:
    branches: [dev, stable]
  # Do build on demand
  workflow_dispatch:

jobs:
  # Build Sonic Pi
  build:
    name: "${{matrix.title}} (${{matrix.cc}}, ${{matrix.arch}}, ${{matrix.build_type}})"
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        include:
          - {
              title: "Linux",
              os: "ubuntu-latest",
              cc: "clang",
              arch: "x86_64",
              build_type: "Release",
            }
          - {
              title: "Linux",
              os: "ubuntu-latest",
              cc: "gcc",
              arch: "x86_64",
              build_type: "Release",
            }

    steps:
      # Get the code
      - uses: actions/checkout@v2

      # Install gems Linux/Max - needs sudo
      - name: Setup Ruby Gems
        working-directory: ${{github.workspace}}/app
        run: |
          sudo gem install rugged --version 0.27.1
          sudo gem install test-unit
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'

        # Get Qt
      - name: Install Qt 6
        uses: jurplel/install-qt-action@v3
        with:
          modules: "qtpositioning qtwebchannel qtwebengine qtwebsockets"
          version: "6.6.0"

        # Install Elixir on Ubuntu
      - name: Linux Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: "26.1.2"
          elixir-version: "1.15.7"
        if: matrix.os == 'ubuntu-latest'

        # Prebuild on Ubuntu
      - name: Prebuild Linux
        working-directory: ${{github.workspace}}/app
        env:
          CC: ${{ matrix.cc }}
          QT_INSTALL_LOCATION: ${{env.Qt6_DIR}}
        run: |
          sudo apt install -y pulseaudio dbus-x11 libssl-dev ruby-dev supercollider-server sc3-plugins-server alsa-base alsa-utils jackd2 libjack-jackd2-dev libjack-jackd2-0 libasound2-dev librtmidi-dev pulseaudio-module-jack
          ./linux-prebuild.sh
        if: matrix.os == 'ubuntu-latest'

        # Run Configuration Config on Ubuntu
      - name: Config Linux
        working-directory: ${{github.workspace}}/app
        env:
          CC: ${{ matrix.cc }}
          QT_INSTALL_LOCATION: ${{env.Qt6_DIR}}
        run: |
          ./linux-config.sh --config ${{ matrix.build_type }}
        if: matrix.os == 'ubuntu-latest'

      # Finally: Build
      - name: Build Linux
        working-directory: ${{github.workspace}}/app
        run: ./linux-build-gui.sh
        if: matrix.os == 'ubuntu-latest'

      # Build Tau server
      - name: Build Tau Server (Linux)
        working-directory: ${{github.workspace}}/app
        run: ./linux-post-tau-prod-release.sh
        if: matrix.os == 'ubuntu-latest'

      - name: BEAM Tests (Linux)
        working-directory: ${{github.workspace}}/app/server/beam/tau
        run: mix test
        env:
          TAU_ENV: test
          TAU_LOG_PATH: ${{github.workspace}}/tau_log.txt
        if: matrix.os == 'ubuntu-latest'

      - name: Ruby Tests (Mac/Linux)
        working-directory: ${{github.workspace}}/app/server/ruby
        run: rake test
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'

      - name: API Tests - Linux
        working-directory: ${{github.workspace}}/app/build/api-tests
        env:
          SONIC_PI_ENV: test
        run: |
          jackd -rd dummy &
          ctest --verbose
        if: matrix.os == 'ubuntu-latest'

      - name: Archive Logs
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: Logs_${{matrix.title}}_${{matrix.cc}}_${{matrix.arch}}_${{matrix.build_type}}
          path: |
            ~/.sonic-pi/log/*.log
